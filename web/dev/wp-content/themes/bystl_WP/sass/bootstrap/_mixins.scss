// MIXINS 
// Snippets of reusable CSS to develop faster and keep code readable
// -----------------------------------------------------------------


// UTILITY MIXINS
// -------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix() {
	@include ie7(zoom, 1);
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted $grayDark;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Center-align a block level element
// ----------------------------------
@mixin center-block() {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// IE6 underscore-hack
// ----------------
@mixin ie6($property, $value){
	@if $legacy-support-for-ie6 {
		_#{$property}: #{$value};
	}
}

// IE7 star-hack (IE7 and IE6)
// ----------------
@mixin ie7($property, $value){
	@if $legacy-support-for-ie7 or $legacy-support-for-ie6 {
		*#{$property}: #{$value};
	}
}

// IE9 escape-hack (IE9, IE8, IE7, IE6)
// ----------------
@mixin ie9($property, $value){
	@if $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8 or $legacy-support-for-ie9 {
		#{$property}: #{$value} \9; /* IE9 and down */
	}
}


// IE7 inline-block
// ----------------
@mixin ie7-inline-block() {
	@include ie7(display, inline);
	@include ie7(zoom, 1);
}

// IE7 likes to collapse whitespace on either side of the inline-block elements.
// Ems because we're attempting to match the width of a space character. Left
// version is for form buttons, which typically come after other elements, and
// right version is for icons, which come before. Applying both is ok, but it will
// mean that space between those elements will be .6em (~2 space characters) in IE7,
// instead of the 1 space in other browsers.
@mixin ie7-restore-left-whitespace() {
  @include ie7(margin-left, .3em);

  &:first-child {
    @include ie7(margin-left, 0);
  }
}

@mixin ie7-restore-right-whitespace() {
  @include ie7(margin-right, .3em);

  &:last-child {
    @include ie7(margin-left, 0);
  }
}

// Sizing shortcuts
// -------------------------
@mixin size($height: 5px, $width: 5px) {
  width: $width;
  height: $height;
}
@mixin square($size: 5px) {
  @include size($size, $size);
}
@mixin headingSize-generate($size, $lineheight, $increment){
	
	$headingBasis: $size;

	@for $i from 1 through 6 {
		h#{$i} { 
			font-size: #{round($headingBasis)}px; 
			line-height: #{round($headingBasis * $lineheight)}px; 
      margin-bottom: #{round($headingBasis / 2)}px;
			small {
				font-size: #{round($headingBasis - ($headingBasis / $increment))}px;
        margin-bottom: #{round(($headingBasis - ($headingBasis / $increment)) / 2)}px;
			}
		}
		.h#{$i} { 
      font-size: #{round($headingBasis)}px; 
      line-height: #{round($headingBasis * $lineheight)}px; 
      margin-bottom: #{round($headingBasis / 2)}px;
      small {
        font-size: #{round($headingBasis - ($headingBasis / $increment))}px;
        margin-bottom: #{round(($headingBasis - ($headingBasis / $increment)) / 2)}px;
      }
    }
		// next time it loops through, heading basis will be the next smallest.
		$headingBasis: $headingBasis - ($headingBasis / $increment);
	}

} // END @mixin headingSize-generate

// Placeholder text
// -------------------------
@mixin placeholder($color: $placeholderText) {
  :-moz-placeholder {
    color: $color;
  }
  ::-webkit-input-placeholder {
    color: $color;
  }
}

// Text overflow
// -------------------------
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}



// FONTS
// --------------------------------------------------


@mixin font-shorthand($size: $baseFontSize, $lineHeight: $baseLineHeight, $weight: normal, $style: normal, $kerning: 0, $transform: none) {
  font-size: $size;
	line-height: $lineHeight;
	@if $weight != normal {
  font-weight: $weight;
	}
	@if $style != normal {
	font-style: $style;
	}
	@if $kerning != 0 {
	letter-spacing: $kerning;
	}
	@if $transform != none {
	text-transform: $transform;
	}
}
@mixin font-serif($size: $baseFontSize, $lineHeight: $baseLineHeight, $weight: normal, $style: normal, $kerning: 0, $transform: none) {
  font-family: $baseFontSerif;
  @include font-shorthand($size, $lineHeight, $weight, $style, $kerning, $transform);
}
@mixin font-sans-serif($size: $baseFontSize, $lineHeight: $baseLineHeight, $weight: normal, $style: normal, $kerning: 0, $transform: none) {
  font-family: $baseFontFamily;
  @include font-shorthand($size, $lineHeight, $weight, $style, $kerning, $transform);
}
@mixin font-monospace($size: $baseFontSize, $lineHeight: $baseLineHeight, $weight: normal, $style: normal, $kerning: 0, $transform: none) {
  font-family: $baseFontMonospace;
  @include font-shorthand($size, $lineHeight, $weight, $style, $kerning, $transform);
}



// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  @include clearfix();
}

// Table columns
@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
@mixin makeRow() {
  margin-left: $gridGutterWidth * -1;
  @include clearfix();
}
@mixin makeColumn($columns: 1, $offset: 0) {
  float: left;
  margin-left: ($gridColumnWidth * $offset) + ($gridGutterWidth * ($offset - 1)) + ($gridGutterWidth * 2);
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

// The Grid
@mixin core-offset($columns, $gridColumnWidth, $gridGutterWidth) {
  margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns + 1));
}

@mixin core-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-core($gridColumnWidth, $gridGutterWidth) {
  .row {
    margin-left: $gridGutterWidth * -1;
    @include clearfix();
  }

  [class*="span"] {
    float: left;
    margin-left: $gridGutterWidth;
  }

  // Set the container width, and override it for fixed navbars in media queries
  .container,
  .navbar-fixed-top .container,
  .navbar-fixed-bottom .container {
    @include core-span($gridColumns, $gridColumnWidth, $gridGutterWidth);
  }

  // generate .spanX and .offsetX
  $i: $gridColumns;
  @while $i > 0 {
    .span#{$i} { @include core-span($i, $gridColumnWidth, $gridGutterWidth); }
    $i: $i - 1;
  }

  $i: $gridColumns;
  @while $i > 0 {
    .offset#{$i} { @include core-offset($i, $gridColumnWidth, $gridGutterWidth); }
    $i: $i - 1;
  }
}

@mixin fluid-span($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  $newWidth: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
  width: $newWidth;
  //@debug "numColumns: #{$columns} : #{$newWidth}";
  @include ie7(width, ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%)); 
}

@mixin grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth) {
  
  // Set the container width, and override it for fixed navbars in media queries
    .container-fluid,
    .navbar-fixed-top .container-fluid,
    .navbar-fixed-bottom .container-fluid {
      /*! fluid span */
      @include fluid-span($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth);
    }

  .row-fluid {
    width: 100%;
    @include clearfix();
    [class*="span"] {
      @include input-block-level();
      float: left;
      margin-left: $fluidGridGutterWidth;
      @include ie7(margin-left, $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%));
    }
    [class*="span"]:first-child {
      margin-left: 0;
    }

    // generate .spanX
    $i: $gridColumns;

    @while $i > 0 {
      .span#{$i} {
        @include fluid-span($i, $fluidGridColumnWidth, $fluidGridGutterWidth);
      }
      $i: $i - 1;
    }
  }
}

@mixin input-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 10;
}

@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .uneditable-input {
    margin-left: 0; // override margin-left from core grid system
  }

  // generate .spanX
  $i: $gridColumns;
  @while $i > 0 {
    input.span#{$i},
    textarea.span#{$i},
    .uneditable-input.span#{$i} {
      @include input-span($i, $gridColumnWidth, $gridGutterWidth);
    }
    $i: $i - 1;
  }
}



// FORMS
// --------------------------------------------------

// Block level inputs
@mixin input-block-level {
  display: block;
  width: 100%;
  min-height: 28px;        // Make inputs at least the height of their button counterpart
  @include box-sizing(border-box); // Makes inputs behave like true block-level elements
}


// Mixin for form field states
@mixin formFieldState($textColor: $gray, $borderColor: darken($grayLighterD, 5), $backgroundColor: darken($almostWhite, 2%)) {
  // Set the text color
  > label,
  .help-block,
  .help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  input,
  select,
  textarea {
    color: $textColor;
    border-color: $borderColor;
    &:focus {
      border-color: darken($borderColor, 10%);
      @include tb_box-shadow(0 0 6px lighten($borderColor, 20%));
    }
  }
  // Give a small background color for input-prepend/-append
  .input-prepend .add-on,
  .input-append .add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}



// CSS3 PROPERTIES
// --------------------------------------------------

// I'm prefixing these because I don't want them to conflict
// with the compass/css3 imports that i feel are more regularly updated and suppported.
// I am also simply redirecting them to their compass counterparts (if they exist) since they are much more robust.

// Border Radius
@mixin tb_border-radius($radius: $default-border-radius) {
	@if not $compass_css3 {
		-webkit-border-radius: $radius;
			 -moz-border-radius: $radius;
						border-radius: $radius;
		@if $warn_if_compass_not_default { @debug "not using compass css3, using bootstrap tb_ mixins"; }
	} 
	@else {
		@include border-radius($radius); // compass equivalent
	}	

}

// Drop shadows
@mixin tb_box-shadow($shadow: $default-box-shadow, $shadow2: false, $shadow3: false, $shadow4: false, $shadow5: false, $shadow6: false, $shadow7: false, $shadow8: false, $shadow9: false, $shadow10: false) {
	@if not $compass_css3 {
		-webkit-box-shadow: $shadow;
			 -moz-box-shadow: $shadow;
						box-shadow: $shadow;
	} 
	@else {
		$shadow: compact($shadow, $shadow2, $shadow3, $shadow4, $shadow5, $shadow6, $shadow7, $shadow8, $shadow9, $shadow10);
		@include box-shadow($shadow); // compass equivalent
	}
}

// Transitions
@mixin tb_transition($transition: $default-transition) {
	@if not $compass_css3 {
		-webkit-transition: $transition;
			 -moz-transition: $transition;
				-ms-transition: $transition;
				 -o-transition: $transition;
						transition: $transition;
	} 
	@else {
		@include transition($transition);
	}
}

// DEFAULT CSS TRANSITION CLASSES

@mixin transition_extensions{
	@if $compass_css3 {
		
		// use @extend to add these properties elsewhere for consistency.
		.trans {
			@include transition-duration(.7s);
		}

		// extension classes for various transition PROPERTIES
		.tp_alpha {
			@include transition-property("opacity");	
		}
		.tp_shadow {
			@include transition-property("box-shadow, text-shadow");
		}
		.tp_scale {
			@include transition-property("height, min-height, max-height, width, min-width, max-width, font-size, line-height");
		}	
		.tp_position {
			@include transition-property("top, right, bottom, left, margin, padding, vertical-aligns");
		}
		.tp_bg {
			@include transition-property("background");
		}
		.tp_color {
			@include transition-property("color, border-color, outline-color, background-color, background-image, opacity");
		}
		.border {
			@include transition-property("border");
		}
		.tp_all {
			@include transition-property("all");
		}

		// extension classes for various transition TIMING FUNCTIONS
		.tt_ease {
			@include transition-timing-function("ease");
		}
		.tt_linear {
			@include transition-timing-function("linear");
		}
		.tt_easeIn {
			@include transition-timing-function("ease-in");
		}
		.tt_easeOut {
			@include transition-timing-function("ease-out");
		}
		.tt_easeInOut {
			@include transition-timing-function("ease-in-out");
		}

	} // END if $compass_css3
} // END transition_extensions mixin
// include by default
@include transition_extensions;

// Transformations
@mixin tb_rotate($degrees: 5deg) {
	@if not $compass_css3 {
		-webkit-transform: rotate($degrees);
			 -moz-transform: rotate($degrees);
				-ms-transform: rotate($degrees);
				 -o-transform: rotate($degrees);
						transform: rotate($degrees);
	}
	@else {
		@include rotate($degrees);
	}
}
@mixin tb_scale($ratio) {
	@if not $compass_css3 {
  -webkit-transform: scale($ratio);
     -moz-transform: scale($ratio);
      -ms-transform: scale($ratio);
       -o-transform: scale($ratio);
          transform: scale($ratio);
	}
	@else {
		@include scale($ratio);
	}
}
@mixin tb_translate($x: 0, $y: 0) {
	@if not $compass_css3 {
		-webkit-transform: translate($x, $y);
			 -moz-transform: translate($x, $y);
				-ms-transform: translate($x, $y);
				 -o-transform: translate($x, $y);
						transform: translate($x, $y);
	}
	@else {
		@include translate($x, $y);
	}
}
@mixin tb_skew($x: $default-skew-x, $y: $default-skew-y) {
	@if not $compass_css3 {
		-webkit-transform: skew($x, $y);
			 -moz-transform: skew($x, $y);
				-ms-transform: skew($x, $y);
				 -o-transform: skew($x, $y);
						transform: skew($x, $y);
	}
	@else {
		@include skew($x, $y);
	}
}
@mixin tb_translate3d($x: $default-translate-x, $y: $default-translate-y, $z: $default-translate-z) {
	@if not $compass_css3 {
		-webkit-transform: translate($x, $y, $z);
			 -moz-transform: translate($x, $y, $z);
				-ms-transform: translate($x, $y, $z);
				 -o-transform: translate($x, $y, $z);
						transform: translate($x, $y, $z);
	}
	@else {
		@include translate3d($x, $y, $z);
	}
}

// Background clipping
// Heads up: FF 3.6 and under need padding instead of padding-box
@mixin tb_background-clip($clip) {
	@if not $compass_css3 {
  -webkit-background-clip: $clip;
     -moz-background-clip: $clip;
          background-clip: $clip;
	}
	@else {
		@include background-clip($clip);
	}
}

// Background sizing
@mixin tb_background-size($size){
	@if not $compass_css3 {
		-webkit-background-size: $size;
			 -moz-background-size: $size;
				 -o-background-size: $size;
						background-size: $size;
	}
	@else {
		@include background-size($size);
	}
}


// Box sizing
@mixin tb_box-sizing($boxmodel) {
	@if not $compass_css3 {
		-webkit-box-sizing: $boxmodel;
			 -moz-box-sizing: $boxmodel;
						box-sizing: $boxmodel;
	}
	@else {
		@include box-sizing($boxmodel);
	}
}

// User select
// For selecting text on the page
@mixin tb_user-select($select) {
	@if not $compass_css3 {
		-webkit-user-select: $select;
			 -moz-user-select: $select;
				 -o-user-select: $select;
						user-select: $select;
	}
	@else {
		@include user-select($select);
	}
}

// Resize anything
@mixin resizable($direction: both) {
  resize: $direction; // Options: horizontal, vertical, both
  overflow: auto; // Safari fix
}

// CSS3 Content Columns
@mixin content-columns($columnCount: $gridColumns, $columnGap: $gridColumnGutter) {
	@if not $compass_css3 {
		-webkit-column-count: $columnCount;
			 -moz-column-count: $columnCount;
						column-count: $columnCount;
		-webkit-column-gap: $columnGap;
			 -moz-column-gap: $columnGap;
						column-gap: $columnGap;
	}
	@else {
		@include column-count($columnCount);
		@include column-gap($columnGap);
	}
}

// Opacity
@mixin tb_opacity($opacity: 100) {
	@if not $compass_css3 {
		opacity: $opacity / 100;
		filter: alpha(opacity=$opacity);
	}
	@else {
		@include opacity($opacity);
	}
}



// BACKGROUNDS
// --------------------------------------------------

// automatically provide cross-browser compatible rgba bg colors
@mixin rgba_bg($color, $alpha: opacity($color)){
	$rgba: rgba($color, $alpha);
	@if $compass_css3 {
		@if $legacy-support-for-ie {
			zoom: 1;
			@if not (opacity($rgba) == 1) {
				// color has transparency.
				background-color: transparent;
				$ie-hex-str: ie_hex_str($rgba);
				$value: unquote("progid:DXImageTransform.Microsoft.gradient(gradientType=0, startColorstr='#{$ie-hex-str}', endColorstr='#{$ie-hex-str}')");
				@if $legacy-support-for-ie9 {
					-ms-filter: $value;
				}
				@if $legacy-support-for-ie8 or $legacy-support-for-ie7 or $legacy-support-for-ie6 {
					filter: $value;
				}
			} 
			@else {
				// it isn't transparent anyway... just output a good ole hex color
				background-color: rgb(red($color), green($color), blue($color));
			}
		}
    background-color: $rgba;
	} // END if($compass_css3)
} // END @mixin rba_gb)

// Add an alphatransparency value to any background or border color (via Elyse Holladay)
@mixin translucent-background($color: $white, $alpha: 1) {
  background-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
}
@mixin translucent-border($color: $white, $alpha: 1) {
  border-color: hsla(hue($color), saturation($color), lightness($color), $alpha);
  @include tb_background-clip(padding-box);
}

// Gradient Bar Colors for buttons and alerts
@mixin gradientBar($wp_primaryColor, $secondaryColor) {
  @include gradient-vertical($wp_primaryColor, $secondaryColor);
  border-color: $secondaryColor $secondaryColor darken($secondaryColor, 15%);
  border-color: rgba($black, 0.1) rgba($black, 0.1) fade-in(rgba($black, 0.1), 0.15);
}

// Gradients
@mixin gradient-horizontal($startColor: $gray, $endColor: $grayDark) {
  background-color: $endColor;
  background-image: -ms-linear-gradient(left, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient(left, $startColor, $endColor); // Le standard
  background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=1); // IE9 and down
}
@mixin gradient-vertical($startColor: $gray, $endColor: $grayDark) {
  background-color: mix($startColor, $endColor, 60%);
  background-image: -ms-linear-gradient(top, $startColor, $endColor); // IE10
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
  background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
  background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
  background-image: linear-gradient(top, $startColor, $endColor); // The standard
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=0); // IE9 and down
}
@mixin gradient-directional($startColor: $gray, $endColor: $grayDark, $angle: left bottom) {
  background-color: $endColor;
  background-repeat: repeat-x;
  background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
  background-image: -ms-linear-gradient($deg, $startColor, $endColor); // IE10
  background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
  background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
  background-image: linear-gradient($deg, $startColor, $endColor); // The standard
}

@mixin gradient-vertical-three-colors($startColor: $teal, $midColor: $purple, $colorStop: 50%, $endColor: $pink) {
  background-color: mix($midColor, $endColor, 80%);
  background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
  background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
  background-image: -ms-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
  background-repeat: no-repeat;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$startColor}', endColorstr='#{$endColor}', GradientType=0); // IE9 and down, gets no color-stop at all the proper fallback
}
@mixin gradient-radial($centerColor: $gray, $outsideColor: $grayDark)  {
  background-color: $outerColor;
  background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
  background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -ms-radial-gradient(circle, $innerColor, $outerColor);
  background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
  background-repeat: no-repeat;    
}
@mixin gradient-striped($color, $angle: left top) {
  background-color: $color;
  background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba($white,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba($white,.15)), color-stop(.75, rgba($white,.15)), color-stop(.75, transparent), to(transparent));
  background-image: -webkit-linear-gradient($angle, rgba($white,.15) 25%, transparent 25%, transparent 50%, rgba($white,.15) 50%, rgba($white,.15) 75%, transparent 75%, transparent);
  background-image: -moz-linear-gradient($angle, rgba($white,.15) 25%, transparent 25%, transparent 50%, rgba($white,.15) 50%, rgba($white,.15) 75%, transparent 75%, transparent);
  background-image: -ms-linear-gradient($angle, rgba($white,.15) 25%, transparent 25%, transparent 50%, rgba($white,.15) 50%, rgba($white,.15) 75%, transparent 75%, transparent);
  background-image: -o-linear-gradient($angle, rgba($white,.15) 25%, transparent 25%, transparent 50%, rgba($white,.15) 50%, rgba($white,.15) 75%, transparent 75%, transparent);
  background-image: linear-gradient($angle, rgba($white,.15) 25%, transparent 25%, transparent 50%, rgba($white,.15) 50%, rgba($white,.15) 75%, transparent 75%, transparent);  
}

// Reset filters for IE
@mixin reset-filter {
  @if $legacy-support-for-ie {
    filter: progid:DXImageTransform.Microsoft.gradient(enabled=false);
  }
}

// Mixin for generating button backgrounds
// ---------------------------------------
@mixin buttonBackground($startColor, $endColor) {
  // gradientBar will set the background to a pleasing blend of these, to support IE<=9
  @include gradientBar($startColor, $endColor);
  @include reset-filter();

  // in these cases the gradient won't cover the background, so we override
  &:hover, &:active, &.active, &.disabled, &[disabled] {
    background-color: $endColor;
  }

  // IE 7 + 8 can't handle box-shadow to show active, so we darken a bit ourselves
  &:active,
  &.active {
    @include ie9(background-color, darken($endColor, 10%));
  }
}

// Navbar vertical align
// -------------------------
// Vertically center elements in the navbar.
// Example: an element has a height of 30px, so write out `.navbarVerticalAlign(30px);` to calculate the appropriate top margin.
@mixin navbarVerticalAlign($elementHeight) {
  margin-top: ($navbarHeight - $elementHeight) / 2;
}

// COMPONENT MIXINS
// --------------------------------------------------

// POPOVER ARROWS
// -------------------------
// For tipsies and popovers
@mixin popoverArrow-top($arrowWidth: 5px) {
  bottom: 0;
  left: 50%;
  margin-left: -$arrowWidth;
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  border-top: $arrowWidth solid $black;
}
@mixin popoverArrow-left($arrowWidth: 5px) {
  top: 50%;
  right: 0;
  margin-top: -$arrowWidth;
  border-top: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid transparent;
  border-left: $arrowWidth solid $black;
}
@mixin popoverArrow-bottom($arrowWidth: 5px) {
  top: 0;
  left: 50%;
  margin-left: -$arrowWidth;
  border-left: $arrowWidth solid transparent;
  border-right: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid $black;
}
@mixin popoverArrow-right($arrowWidth: 5px) {
  top: 50%;
  left: 0;
  margin-top: -$arrowWidth;
  border-top: $arrowWidth solid transparent;
  border-bottom: $arrowWidth solid transparent;
  border-right: $arrowWidth solid $black;
}